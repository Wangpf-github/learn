/******************************************************************************

  Copyright (C), 2016, Hisilicon Tech. Co., Ltd.

 ******************************************************************************
  File Name     : IMX577_slave_priv.h
  Version       : Initial Draft
  Author        : Hisilicon BVT PQ group
  Created       : 2017/05/08
  Description   : this file was private for IMX577 slave mode sensor
  History       :
  1.Date        :
    Author      :
    Modification: Created file
******************************************************************************/
#ifndef __IMX577_SLAVE_PRIV_H_
#define __IMX577_SLAVE_PRIV_H_

#ifdef __cplusplus
#if __cplusplus
extern "C" {
#endif
#endif

#include "hi_type.h"

// usefull macro
#define HIGH_8BITS(x) ((x & 0xff00) >> 8)
#define LOW_8BITS(x)  (x & 0x00ff)
#ifndef MAX
#define MAX(a, b) (((a) < (b)) ?  (b) : (a))
#endif

#ifndef MIN
#define MIN(a, b) (((a) > (b)) ?  (b) : (a))
#endif

#define IMX577_RES_IS_8M(w, h)        ((w == 3840) && (h == 2160))
#define IMX577_RES_IS_12M(w, h)        (((w == 4056) && (h == 3040)) || ((w == 4000) && (h == 3000)))
#define IMX577_RES_IS_2M(w, h)        (((w == 1920) && (h == 1080)) || ((w == 1920) && (h == 1080)))
#define IMX577_RES_IS_1M(w, h)        ((w <= 1280) && (h <= 720))

//#define LENS_TYPE_DUAL_FISH    //Donot remove this define

#define CHECK_RET(express)\
    do{\
        HI_S32 s32Ret;\
        s32Ret = express;\
        if (HI_SUCCESS != s32Ret)\
        {\
            printf("Failed at %s: LINE: %d with %#x!\n", __FUNCTION__, __LINE__, s32Ret);\
        }\
    }while(0)

/*
--------------------------------------------------------------------------------
- Structure For Slave Mode Sensor Using
--------------------------------------------------------------------------------
*/
#define     FULL_LINES_MAX              (0xFFFF)
// registers to control exposure
#define     IMX577_COARSE_INTEG_TIME_L                (0x0203)
#define     IMX577_COARSE_INTEG_TIME_H                (0x0202)
#define     IMX577_ANA_GAIN_GLOBAL_L             (0x0205)
#define     IMX577_ANA_GAIN_GLOBAL_H               (0x0204)
#define     IMX577_DPGA_USE_GLOBAL_GAIN             (0x3FF9)
#define     IMX577_DIG_GAIN_GR_L             (0x020F)
#define     IMX577_DIG_GAIN_GR_H             (0x020E)
#define     IMX577_LINE_LENGTH_PCK_L        (0x341)
#define     IMX577_LINE_LENGTH_PCK_H        (0x340)
#define     IMX577_FRM_LENGTH_CTL      (0x350)
#define     IMX577_PRSH_LENGTH_LINE_L        (0x3F3B)
#define     IMX577_PRSH_LENGTH_LINE_H        (0x3F3A)

typedef struct hiIMX577_SENSOR_REG_S
{
    HI_U16 u16Addr;
    HI_U8  u8Data;
} IMX577_SENSOR_REG_S;

typedef enum
{
    IMX577_12M30FPS_LINER_MODE = 0,  //4000x3000@30fps@12bit
    IMX577_8M30FPS_LINER_MODE = 1,  //3840x2160@30fps@12bit
    IMX577_8M60FPS_LINER_MODE = 2,  //3840x2160@60fps@12bit
    IMX577_9M50FPS_LINER_MODE = 3,  //3000x3000@50fps@10bit
    IMX577_2M240FPS_LINER_MODE = 4, //1920x1080@240fps@10bit
    IMX577_9M60FPS_LINER_MODE = 5,  //3000x3000@60fps@10bit
	IMX577_1M240FPS_LINER_MODE = 6, //1280x720@240fps@10bit
    IMX577_MODE_BUTT

} IMX577_RES_MODE_E;

typedef enum
{
    IMX577_SINGLE_LENS_MODE = 0,
    IMX577_2FISH_LENS_MODE = 1,
    IMX577_4FISH_LENS_MODE = 2,
    IMX577_4NORMAL_LENS_MODE = 3,
    IMX577_LENS_MODE_TOTAL

} IMX577_LENS_MODE_E;

typedef struct hiIMX577_VIDEO_MODE_TBL_S
{
    HI_U32  u32Inck;
    HI_U32  f32InckPerHs;
    HI_U32  u32InckPerVs;
    HI_U32  u32VertiLines;

    HI_U32  f32MaxFps;
    const char *pszModeName;

} IMX577_VIDEO_MODE_TBL_S;

/* clang-format off */
#define ZERO(type) \
    (((const union { type a; char b[sizeof(type)]; }){.b = {0}}).a)
 
#define FIELD(value, lsb, msb)                                                 \
    (((value) & ((1 << ((msb) - (lsb) + 1)) - 1)) << (lsb))
/* clang-format on */

#define SENSOR_FREE(ptr)\
    do{\
        if (HI_NULL != ptr)\
        {\
            free(ptr);\
            ptr = HI_NULL;\
        }\
    } while (0)

#define CMOS_CHECK_POINTER(ptr)\
    do {\
        if (HI_NULL == ptr)\
        {\
            ISP_TRACE(HI_DBG_ERR, "Null Pointer!\n");\
            return HI_ERR_ISP_NULL_PTR;\
        }\
    }while(0)

#define CMOS_CHECK_POINTER_VOID(ptr)\
    do {\
        if (HI_NULL == ptr)\
        {\
            ISP_TRACE(HI_DBG_ERR, "Null Pointer!\n");\
            return;\
        }\
    }while(0)

#define SENSOR_FREE(ptr)\
    do{\
        if (HI_NULL != ptr)\
        {\
            free(ptr);\
            ptr = HI_NULL;\
        }\
    } while (0)


/* Piris attr */
static ISP_PIRIS_ATTR_S gstPirisAttr =
{
    0,      // bStepFNOTableChange
    1,      // bZeroIsMax
    94,     // u16TotalStep
    62,     // u16StepCount
    /* Step-F number mapping table. Must be from small to large. F1.0 is 1024 and F32.0 is 1 */
    {30, 35, 40, 45, 50, 56, 61, 67, 73, 79, 85, 92, 98, 105, 112, 120, 127, 135, 143, 150, 158, 166, 174, 183, 191, 200, 208, 217, 225, 234, 243, 252, 261, 270, 279, 289, 298, 307, 316, 325, 335, 344, 353, 362, 372, 381, 390, 399, 408, 417, 426, 435, 444, 453, 462, 470, 478, 486, 493, 500, 506, 512},
    ISP_IRIS_F_NO_1_4, // enMaxIrisFNOTarget
    ISP_IRIS_F_NO_5_6, // enMinIrisFNOTarget
    0,                 // bFNOExValid
    512,               // u32MaxIrisFNOTarget
    30                 // u32MinIrisFNOTarget
};


static AWB_CCM_S g_stAwbCcm_NormalLens =
{
            3700,
            {
                0x01A1,  0x8093,  0x800E,
                0x8064,  0x018E,  0x802A,
                0x000C,  0x8099,  0x018D,
            },
        
            2100,
            {
                0x0100,  0x0000,  0x0000,
                0x0000,  0x0100,  0x0000,
                0x0000,  0x0000,  0x0100
            },
        
            1600,
            {
                0x0100,  0x0000,  0x0000,
                0x0000,  0x0100,  0x0000,
                0x0000,  0x0000,  0x0100
            },
};

#if 0
static AWB_CCM_S g_stAwbCcm_FishLens =
{
 
          
            3700,
            {
                0x0190,  0x8091,  0x0001,
                0x804F,  0x0176,  0x8027,
                0x8008,  0x80A3,  0x01AB
            },
        
            
            2100,
            {
                0x0100,  0x0000,  0x0000,
                0x0000,  0x0100,  0x0000,
                0x0000,  0x0000,  0x0100
            },
       
            1600,
            {
                0x0100,  0x0000,  0x0000,
                0x0000,  0x0100,  0x0000,
                0x0000,  0x0000,  0x0100
            },
};
#endif

static AWB_AGC_TABLE_S g_stAwbAgcTable =
{
    /* bvalid */
    1,

    /* saturation */
    {0x80, 0x80, 0x78, 0x74, 0x68, 0x60, 0x58, 0x50, 0x48, 0x40, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38}
};

static ISP_CMOS_AGC_TABLE_S g_stIspAgcTable =
{
    /* bvalid */
    1,

    /* snr_thresh */
    {0x08,0x0c,0x10,0x14,0x18,0x20,0x28,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30},
    /* demosaic_np_offset */
    {0x0,0xa,0x12,0x1a,0x20,0x28,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30},

    /* ge_strength */
    {0x55,0x55,0x55,0x55,0x55,0x55,0x37,0x37,0x37,0x37,0x37,0x37,0x37,0x37,0x37,0x37}
};

static ISP_CMOS_BAYER_SHARPEN_S g_stIspBayerSharpen = 
{
    /* bvalid */
    1,

    /* ShpAlgSel = 1 is Demosaic SharpenEx, else Demosaic sharpen. */
    0,

    /* sharpen_alt_d to Sharpen */
    {20, 20, 20, 38, 38, 38, 34, 34, 32, 32, 32, 32, 32, 32, 32, 32},
    /* sharpen_alt_ud to Sharpen */
    {22, 20, 20, 20, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 16, 16},
    /* demosaic_lum_thresh to Sharpen */
    {0x50,0x50,0x4c,0x42,0x38,0x30,0x28,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20},
    /* SharpenHF to SharpenEx */
    {0x30,0x30,0x30,0x30,0x30,0x30,0x2c,0x28,0x20,0x18,0x14,0x10,0x10,0x10,0x10,0x10},
    /* SharpenMF to SharpenEx */
    {0x30,0x30,0x30,0x30,0x28,0x20,0x20,0x20,0x20,0x20,0x10,0x10,0x10,0x10,0x10,0x10},
    /* SharpenLF to SharpenEx */
    {0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18},
    /* SadAmplifier to SharpenEx */
    {0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10}
};

static ISP_CMOS_YUV_SHARPEN_S g_stIspYuvSharpen = 
{
    /* bvalid */
    1,

    /* 100,  200,    400,     800,    1600,    3200,    6400,    12800,    25600,   51200,  102400,  204800,   409600,   819200,   1638400,  3276800 */

    /* bEnLowLumaShoot */ 
    {0,     0,     0,     0,     0,     0,     0,     0,     0,     1,     1,     1,     1,     1,     1,     1},
    /* TextureSt */
    {30, 28, 25, 20, 20, 26, 24, 24, 22, 20, 20, 18, 18, 12, 12, 12},
    /* EdgeSt */     
    {40, 40, 38, 36, 34, 32, 30, 28, 20, 20, 16, 16, 16, 16, 16, 16},
    /* OverShoot */
    {2, 2, 10, 20, 30, 50, 80, 80, 70, 60, 50, 40, 30, 24, 24, 24},
    /* UnderShoot */
    {20, 30, 50, 70, 90, 120, 120, 100, 80, 50, 30, 26, 26, 24, 24, 24},
    /* TextureThd */
    {10,   16,    20,    32,    36,    40,    48,    56,    64,   128,   156,    156,    156,    160,    160,   160},
    /* EdgeThd */
    {0,     0,     0,    10,    10,    10,    16,    32,    64,   128,   156,    156,    156,    160,    160,   160},
    /* JagCtrl */
    {16,   14,    12,    10,     8,     6,     4,     4,     4,     4,     4,      4,      2,      2,      2,     2},
    /* SaltCtrl */
    {50,   50,    50,    90,    90,    90,    90,    90,    90,    90,     90,    90,     90,     50,     50,    50},
    /* PepperCtrl */
    {0,     0,      0,     20,     60,     60,     60,     80,    120,    160,    180,     180,   180,     180,    180,   180},
    /* DetailCtrl */
    {245,  240,   230,    220,    210,    200,    200,    180,    180,    180,    180,     160,    160,      100,     50,    50},
    /* LumaThd */
    {
        {20,    20,     20,     20,     20,     20,     20,     20,     20,     20,     20,     20,     20,     20,     20,     20},
        {40,    40,     40,     40,     40,     40,     40,     40,     40,     40,     40,     40,     40,     40,     40,     40},
        {65,    65,     65,     65,     65,     65,     65,     65,     65,     65,     65,     65,     65,     65,     65,     65},
        {90,    90,     90,     90,     90,     90,     90,     90,     90,     90,     90,     90,     90,     90,     90,     90}
    },
    /* LumaWgt */
    {
        {160,   160,    160,    150,    140,    130,    120,    110,    100,    100,     90,     90,     80,     80,     80,     80},
        {200,   200,    200,    180,    170,    160,    150,    150,    150,    150,    120,    120,    120,    120,    120,    120},
        {240,   240,    240,    200,    200,    190,    180,    180,    180,    180,    160,    160,    160,    160,    160,    160},
        {255,   255,    255,    255,    255,    255,    255,    255,    255,    255,    255,    255,    255,    255,    255,    255},
    }
};

static ISP_CMOS_NOISE_TABLE_S g_stIspNoiseTable =
{
    /* bvalid */
    1,
    /* nosie_profile_weight_lut */
    {
        0x0,  0x0,  0x0,  0x0,  0x0,  0x0,  0x3,  0xC,  0x11, 0x15, 0x17, 0x1A, 0x1B, 0x1D, 0x1E, 0x1F, 
        0x21, 0x22, 0x23, 0x23, 0x24, 0x25, 0x26, 0x26, 0x27, 0x27, 0x28, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 
        0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 
        0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 
        0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 
        0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39,
        0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 
        0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
    },

    /* demosaic_weight_lut */
    {
        0x3,  0xC,  0x11, 0x15, 0x17, 0x1A, 0x1B, 0x1D, 0x1E, 0x1F, 0x21, 0x22, 0x23, 0x23, 0x24, 0x25, 
        0x26, 0x26, 0x27, 0x27, 0x28, 0x29, 0x29, 0x2A, 0x2A, 0x2A, 0x2B, 0x2B, 0x2C, 0x2C, 0x2C, 0x2D, 
        0x2D, 0x2E, 0x2E, 0x2E, 0x2E, 0x2F, 0x2F, 0x2F, 0x30, 0x30, 0x30, 0x30, 0x31, 0x31, 0x31, 0x31, 
        0x32, 0x32, 0x32, 0x32, 0x33, 0x33, 0x33, 0x33, 0x33, 0x34, 0x34, 0x34, 0x34, 0x34, 0x35, 0x35, 
        0x35, 0x35, 0x35, 0x35, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 
        0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 
        0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 
        0x3B, 0x3B, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 0x3C, 
    }
};

static ISP_CMOS_DEMOSAIC_S g_stIspDemosaic =
{
    /* bvalid */
    1,
    /*vh_slope*/
    0xac,
    /*aa_slope*/
    0xa3,
    /*va_slope*/
    0xa0,
    /*uu_slope*/
    140,
    /*sat_slope*/
    0x5d,
    /*ac_slope*/
    0xa0,
    /*fc_slope*/
    0x80,
    /*vh_thresh*/
    0x0,
    /*aa_thresh*/
    0x00,
    /*va_thresh*/
    0x00,
    /*uu_thresh*/
    0x08,
    /*sat_thresh*/
    0x00,
    /*ac_thresh*/
    0x1b3
};    

static ISP_CMOS_GAMMA_S g_stIspGamma =
{
    /* bvalid */
    1,
    {
        0,76,151,224,281,335,425,465,509,559,612,668,725,783,842,899,954,988,1023,1058,1093,
        1128,1164,1200,1235,1271,1306,1340,1374,1408,1440,1472,1503,1533,1562,1591,1620,1648,
        1675,1702,1728,1755,1780,1805,1830,1855,1879,1902,1925,1948,1970,1992,2014,2035,2056,
        2077,2097,2116,2136,2155,2174,2192,2210,2228,2246,2263,2280,2296,2313,2329,2344,2360,
        2375,2390,2405,2420,2434,2448,2462,2475,2489,2502,2515,2528,2541,2553,2566,2578,2590,
        2602,2614,2625,2637,2648,2659,2670,2681,2692,2703,2714,2724,2735,2745,2756,2766,2776,
        2786,2796,2806,2816,2826,2836,2846,2856,2865,2875,2885,2894,2904,2914,2923,2933,2942,
        2952,2961,2971,2980,2990,2999,3009,3018,3028,3037,3046,3056,3065,3074,3084,3093,3103,
        3112,3121,3130,3140,3149,3158,3168,3177,3186,3195,3204,3214,3223,3232,3241,3250,3259,
        3268,3277,3285,3294,3303,3312,3320,3329,3338,3346,3355,3363,3371,3380,3388,3396,3404,
        3412,3420,3427,3435,3443,3450,3458,3465,3472,3481,3490,3499,3508,3517,3525,3534,3543,
        3552,3561,3570,3578,3587,3596,3605,3613,3622,3631,3640,3648,3657,3666,3674,3683,3692,
        3700,3709,3718,3726,3735,3743,3752,3761,3769,3778,3786,3795,3803,3812,3820,3829,3837,
        3846,3854,3863,3871,3879,3888,3896,3905,3913,3921,3930,3938,3947,3955,3963,3972,3980,
        3988,3996,4005,4013,4021,4030,4038,4046,4054,4063,4071,4079,4087,4094,4095
    }
};


#define NA 0xFF
static const HI_U16 gs_au16SensorCfgSeqComm[][2] =
{
    {0x01, 0x3F0B},
    {0x00, 0x3041},  //0x00
    {0x00, 0x3040},  //0x00  slave mode
    {0x00, 0x4b81},  //0x00
    {0x01, 0x4B2F},
    {0x01, 0x4B80},
    {0x00, 0x0350},  //0x00
    {0x18, 0x0136},
    {0x00, 0x0137},
    {0x02, 0x0808},
    {0x01, 0xE07A},
    {0x00, 0xE000},
    {0x18, 0x4AE9},
    {0x08, 0x4AEA},
    {0x04, 0xF61C},
    {0x04, 0xF61E},
    {0x21, 0x4AE9},
    {0x80, 0x4AEA},
    {0x1F, 0x38A8},
    {0x01, 0x3F4C},    //LP11模式，0x2 为LP00
    {0x00, 0x3E44},
    {0x01, 0x3010},
//    {0x01, 0x0104},
    {0xFF, 0x38A9},
    {0x1F, 0x38AA},
    {0xFF, 0x38AB},
    {0x01, 0x420B},
    {0x00, 0x55D4},
    {0x00, 0x55D5},
    {0x07, 0x55D6},
    {0xFF, 0x55D7},
    {0x07, 0x55E8},
    {0xFF, 0x55E9},
    {0x00, 0x55EA},
    {0x00, 0x55EB},
    {0x07, 0x574C},
    {0xFF, 0x574D},
    {0x00, 0x574E},
    {0x00, 0x574F},
    {0x00, 0x5754},
    {0x00, 0x5755},
    {0x07, 0x5756},
    {0xFF, 0x5757},
    {0x04, 0x5973},
    {0x01, 0x5974},
    {0xC3, 0x5D13},
    {0x58, 0x5D14},
    {0xA3, 0x5D15},
    {0x1D, 0x5D16},
    {0x65, 0x5D17},
    {0x8C, 0x5D18},
    {0x06, 0x5D1A},
    {0xA9, 0x5D1B},
    {0x45, 0x5D1C},
    {0x3A, 0x5D1D},
    {0xAB, 0x5D1E},
    {0x15, 0x5D1F},
    {0x0E, 0x5D21},
    {0x52, 0x5D22},
    {0xAA, 0x5D23},
    {0x7D, 0x5D24},
    {0x57, 0x5D25},
    {0xA8, 0x5D26},
    {0x5A, 0x5D37},
    {0x5A, 0x5D38},
    {0x7F, 0x5D77},
    {0x00, 0x7B7C},
    {0x00, 0x7B7D},
    {0x00, 0x8D1F},
    {0x00, 0x8D27},
    {0x03, 0x9004},
    {0x50, 0x9200},
    {0x6C, 0x9201},
    {0x71, 0x9202},
    {0x00, 0x9203},
    {0x71, 0x9204},
    {0x01, 0x9205},
    {0x6A, 0x9371},
    {0x6A, 0x9373},
    {0x64, 0x9375},
    {0x00, 0x990C},
    {0x08, 0x990D},
    {0x8C, 0x9956},
    {0x64, 0x9957},
    {0x50, 0x9958},
    {0x06, 0x9A48},
    {0x06, 0x9A49},
    {0x06, 0x9A4A},
    {0x06, 0x9A4B},
    {0x06, 0x9A4C},
    {0x06, 0x9A4D},
    {0x0A, 0xA001},
    {0x0A, 0xA003},
    {0x0A, 0xA005},
    {0x01, 0xA006},
    {0xC0, 0xA007},
    {0xC0, 0xA009},
    {0x01, 0x3D8A},
    {0x01, 0x7B3B},
    {0x00, 0x7B4C},
    {0x00, 0x9905},
    {0x00, 0x9907},
    {0x00, 0x9909},
    {0x00, 0x990B},
    {0x3C, 0x9944},
    {0x3C, 0x9947},
    {0x8C, 0x994A},
    {0x50, 0x994B},
    {0x1B, 0x994C},
    {0x8C, 0x994D},
    {0x50, 0x994E},
    {0x1B, 0x994F},
    {0x8C, 0x9950},
    {0x1B, 0x9951},
    {0x0A, 0x9952},
    {0x8C, 0x9953},
    {0x1B, 0x9954},
    {0x0A, 0x9955},
    {0x04, 0x9A13},
    {0x04, 0x9A14},
    {0x00, 0x9A19},
    {0x04, 0x9A1C},
    {0x04, 0x9A1D},
    {0x05, 0x9A26},
    {0x05, 0x9A27},
    {0x01, 0x9A2C},
    {0x03, 0x9A2D},
    {0x05, 0x9A2F},
    {0x05, 0x9A30},
    {0x00, 0x9A41},
    {0x00, 0x9A46},
    {0x00, 0x9A47},
    {0x35, 0x9C17},
    {0x31, 0x9C1D},
    {0x50, 0x9C29},
    {0x2F, 0x9C3B},
    {0x6B, 0x9C41},
    {0x2D, 0x9C47},
    {0x40, 0x9C4D},
    {0x00, 0x9C6B},
    {0xC8, 0x9C71},
    {0x32, 0x9C73},
    {0x04, 0x9C75},
    {0x2D, 0x9C7D},
    {0x40, 0x9C83},
    {0x3F, 0x9C94},
    {0x3F, 0x9C95},
    {0x3F, 0x9C96},
    {0x00, 0x9C97},
    {0x00, 0x9C98},
    {0x00, 0x9C99},
    {0x3F, 0x9C9A},
    {0x3F, 0x9C9B},
    {0x3F, 0x9C9C},
    {0x0F, 0x9CA0},
    {0x0F, 0x9CA1},
    {0x0F, 0x9CA2},
    {0x00, 0x9CA3},
    {0x00, 0x9CA4},
    {0x00, 0x9CA5},
    {0x1E, 0x9CA6},
    {0x1E, 0x9CA7},
    {0x1E, 0x9CA8},
    {0x00, 0x9CA9},
    {0x00, 0x9CAA},
    {0x00, 0x9CAB},
    {0x09, 0x9CAC},
    {0x09, 0x9CAD},
    {0x09, 0x9CAE},
    {0x50, 0x9CBD},
    {0x50, 0x9CBF},
    {0x50, 0x9CC1},
    {0x40, 0x9CC3},
    {0x40, 0x9CC5},
    {0x40, 0x9CC7},
    {0x0A, 0x9CC9},
    {0x0A, 0x9CCB},
    {0x0A, 0x9CCD},
    {0x35, 0x9D17},
    {0x31, 0x9D1D},
    {0x50, 0x9D29},
    {0x2F, 0x9D3B},
    {0x6B, 0x9D41},
    {0x42, 0x9D47},
    {0x5A, 0x9D4D},
    {0x00, 0x9D6B},
    {0xC8, 0x9D71},
    {0x32, 0x9D73},
    {0x04, 0x9D75},
    {0x42, 0x9D7D},
    {0x5A, 0x9D83},
    {0x3F, 0x9D94},
    {0x3F, 0x9D95},
    {0x3F, 0x9D96},
    {0x00, 0x9D97},
    {0x00, 0x9D98},
    {0x00, 0x9D99},
    {0x3F, 0x9D9A},
    {0x3F, 0x9D9B},
    {0x3F, 0x9D9C},
    {0x1F, 0x9D9D},
    {0x1F, 0x9D9E},
    {0x1F, 0x9D9F},
    {0x0F, 0x9DA0},
    {0x0F, 0x9DA1},
    {0x0F, 0x9DA2},
    {0x00, 0x9DA3},
    {0x00, 0x9DA4},
    {0x00, 0x9DA5},
    {0x1E, 0x9DA6},
    {0x1E, 0x9DA7},
    {0x1E, 0x9DA8},
    {0x00, 0x9DA9},
    {0x00, 0x9DAA},
    {0x00, 0x9DAB},
    {0x09, 0x9DAC},
    {0x09, 0x9DAD},
    {0x09, 0x9DAE},
    {0x0A, 0x9DC9},
    {0x0A, 0x9DCB},
    {0x0A, 0x9DCD},
    {0x35, 0x9E17},
    {0x31, 0x9E1D},
    {0x50, 0x9E29},
    {0x2F, 0x9E3B},
    {0x6B, 0x9E41},
    {0x2D, 0x9E47},
    {0x40, 0x9E4D},
    {0x00, 0x9E6B},
    {0xC8, 0x9E71},
    {0x32, 0x9E73},
    {0x04, 0x9E75},
    {0x0F, 0x9E94},
    {0x0F, 0x9E95},
    {0x0F, 0x9E96},
    {0x00, 0x9E97},
    {0x00, 0x9E98},
    {0x00, 0x9E99},
    {0x0F, 0x9EA0},
    {0x0F, 0x9EA1},
    {0x0F, 0x9EA2},
    {0x00, 0x9EA3},
    {0x00, 0x9EA4},
    {0x00, 0x9EA5},
    {0x3F, 0x9EA6},
    {0x3F, 0x9EA7},
    {0x3F, 0x9EA8},
    {0x00, 0x9EA9},
    {0x00, 0x9EAA},
    {0x00, 0x9EAB},
    {0x09, 0x9EAC},
    {0x09, 0x9EAD},
    {0x09, 0x9EAE},
    {0x0A, 0x9EC9},
    {0x0A, 0x9ECB},
    {0x0A, 0x9ECD},
    {0x35, 0x9F17},
    {0x31, 0x9F1D},
    {0x50, 0x9F29},
    {0x2F, 0x9F3B},
    {0x6B, 0x9F41},
    {0x42, 0x9F47},
    {0x5A, 0x9F4D},
    {0x00, 0x9F6B},
    {0xC8, 0x9F71},
    {0x32, 0x9F73},
    {0x04, 0x9F75},
    {0x0F, 0x9F94},
    {0x0F, 0x9F95},
    {0x0F, 0x9F96},
    {0x00, 0x9F97},
    {0x00, 0x9F98},
    {0x00, 0x9F99},
    {0x2F, 0x9F9A},
    {0x2F, 0x9F9B},
    {0x2F, 0x9F9C},
    {0x00, 0x9F9D},
    {0x00, 0x9F9E},
    {0x00, 0x9F9F},
    {0x0F, 0x9FA0},
    {0x0F, 0x9FA1},
    {0x0F, 0x9FA2},
    {0x00, 0x9FA3},
    {0x00, 0x9FA4},
    {0x00, 0x9FA5},
    {0x1E, 0x9FA6},
    {0x1E, 0x9FA7},
    {0x1E, 0x9FA8},
    {0x00, 0x9FA9},
    {0x00, 0x9FAA},
    {0x00, 0x9FAB},
    {0x09, 0x9FAC},
    {0x09, 0x9FAD},
    {0x09, 0x9FAE},
    {0x0A, 0x9FC9},
    {0x0A, 0x9FCB},
    {0x0A, 0x9FCD},
    {0xFF, 0xA14B},
    {0x0C, 0xA151},
    {0x50, 0xA153},
    {0x02, 0xA155},
    {0x00, 0xA157},
    {0xFF, 0xA1AD},
    {0x0C, 0xA1B3},
    {0x50, 0xA1B5},
    {0x00, 0xA1B9},
    {0xFF, 0xA24B},
    {0x00, 0xA257},
    {0xFF, 0xA2AD},
    {0x00, 0xA2B9},
    {0x04, 0xB21F},
    {0x00, 0xB35C},
    {0x08, 0xB35E},
};

static const HI_U16 gs_au16SensorCfgSeq[][IMX577_MODE_BUTT + 1] =
{
    {0x0C, 0x0C, 0x0C, 0x0A, 0x0A, 0x0A, 0x0A, 0x0112},
    {0x0C, 0x0C, 0x0C, 0x0A, 0x0A, 0x0A, 0x0A, 0x0113},  // RAW 数据格式 12bit
    {0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x0114},  //lane num 
    {0x1F, 0x30, 0x18, 0x13, 0x0C, 0x11, 0x0B, 0x0342},
    {0x40, 0x20, 0xB0, 0x88, 0x1C, 0xc4, 0xC8, 0x0343}, //d4  length of line (pixels)
    {0x0D, 0x08, 0x08, 0x0D, 0x04, 0x0b, 0x04, 0x0340},
    {0xAC, 0xe3, 0xA7, 0x20, 0x6A, 0xec, 0x83, 0x0341}, //c0  length of frame (lines)
    {0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x0344}, //xStart[12:8]
    {0x00, 0x6C, 0x6C, 0xF4, 0x60, 0x10, 0x68, 0x0345}, //xStart[7:0]   108
    {0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x0346}, //yStart[12:8]
    {0x00, 0xB8, 0xB8, 0x00, 0xB8, 0x14, 0xB0, 0x0347}, //yStart[7:0]   440
    {0x0F, 0x0F, 0x0F, 0x0D, 0x0F, 0x0D, 0x0F, 0x0348}, //xEnd[12:8]
    {0xD7, 0x6B, 0x6B, 0xAB, 0x73, 0xC7, 0x6B, 0x0349}, //xEnd[7:0]
    {0x0B, 0x0A, 0x0A, 0x0B, 0x0A, 0x0B, 0x0A, 0x034A}, //yEnd[12:8]
    {0xDF, 0x27, 0x27, 0xB7, 0x27, 0xCB, 0x2F, 0x034B}, //yEnd[7:0]
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00E3}, //HDR enable
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00E4}, //HDR mode select
    {0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x00FC}, //HDR
    {0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x00FD}, //HDR
    {0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x00FE}, //HDR
    {0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x0A, 0x00FF}, //HDR
//    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0220}, //未对应寄存器
//    {0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0221}, //未对应寄存器
    {0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0381},
    {0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0383},
    {0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0385},
    {0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0387},
    {0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x0900}, //Bining mode enable
    {0x00, 0x11, 0x11, 0x11, 0x22, 0x11, 0x22, 0x0901}, //Bining
    {0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0902}, //Bining
//    {0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x3140}, //未对应寄存器
//    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C00},
//    {0x03, 0x03, 0x03, 0x03, 0x01, 0x03, 0x01, 0x3C01},
//    {0xA2, 0xA2, 0xA2, 0xDC, 0x9C, 0xDC, 0x9C, 0x3C02},
    {0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x3F0D},  //AD converter bit setting
//    {0x07, 0x07, 0x07, 0x07, 0x00, 0x07, 0x00, 0x5748}, //未对应寄存器
//    {0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0x00, 0x5749},
//    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x574A},
//    {0x00, 0x00, 0x00, 0x00, 0xA4, 0x00, 0xA4, 0x574B},
//    {0x0A, 0x0A, 0x0A, 0x0E, 0x0E, 0x0E, 0x0E, 0x7B75},
//    {0x0C, 0x0C, 0x0C, 0x09, 0x09, 0x09, 0x09, 0x7B76},
//    {0x07, 0x07, 0x07, 0x0C, 0x08, 0x0C, 0x08, 0x7B77},
//    {0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x7B78},
//    {0x3C, 0x3C, 0x3C, 0x3B, 0x34, 0x3B, 0x34, 0x7B79},
//    {0x01, 0x01, 0x01, 0x01, 0x00, 0x01, 0x00, 0x7B53},
//    {0x5A, 0x5A, 0x5A, 0x5A, 0x73, 0x5A, 0x73, 0x9369},
//    {0x55, 0x55, 0x55, 0x55, 0x64, 0x55, 0x64, 0x936B},
//    {0x28, 0x28, 0x28, 0x28, 0x5F, 0x28, 0x5F, 0x936D},
//    {0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x9304},
//    {0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x80, 0x9305},
//    {0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x9E9A},
//    {0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x9E9B},
//    {0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x2F, 0x9E9C},
//    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9E9D},
//    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9E9E},
//    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9E9F},
//    {0x60, 0x60, 0x60, 0x60, 0x27, 0x60, 0x27, 0xA2A9},
//    {0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0xA2B7},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0401}, //Scaling mode selection 缩放模式
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0404},
    {0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x18, 0x0405},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0408},
    {0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x0409},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x040A},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x040B},
    {0x0F, 0x0F, 0x0F, 0x0B, 0x07, 0x0B, 0x07, 0x040C},
    {0xD8, 0x00, 0x00, 0xB8, 0x80, 0xB8, 0x82, 0x040D},
    {0x0B, 0x08, 0x08, 0x0B, 0x04, 0x0B, 0x04, 0x040E},
    {0xE0, 0x70, 0x70, 0xB8, 0x38, 0xB8, 0x3A, 0x040F},
    {0x0F, 0x0F, 0x0F, 0x0B, 0x07, 0x0B, 0x05, 0x034C},
    {0xD8, 0x00, 0x00, 0xB8, 0x80, 0xB8, 0x00, 0x034D},
    {0x0B, 0x08, 0x08, 0x0B, 0x04, 0x0B, 0x02, 0x034E},
    {0xE0, 0x70, 0x70, 0xB8, 0x38, 0xB8, 0xD0, 0x034F},

    {0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x0301},
    {0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0303},
    {0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x02, 0x0305},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0306},
    {0xAF, 0xAF, 0xAF, 0xAF, 0xAF, 0x04, 0xAE, 0x0307},
    {0x0C, 0x0C, 0x0C, 0x0A, 0x0A, 0x0A, 0x0A, 0x0309},
    {0x01, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x030B},
    {0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x030D},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x030E},
    {0x7D, 0x88, 0x88, 0x73, 0x7D, 0x7D, 0xAE, 0x030F},
    {0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0310},  // IVTCK & IOPCK

    {0x17, 0x0C, 0x19, 0x15, 0x17, 0x17, 0x20, 0x0820},
    {0x70, 0xC0, 0x80, 0x90, 0x70, 0x70, 0xA0, 0x0821},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0822},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0823},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x080A},
    {0x97, 0x67, 0x9F, 0x8F, 0x97, 0x97, 0xC7, 0x080B},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x080C},
    {0x5F, 0x37, 0x67, 0x57, 0x5F, 0x5F, 0x87, 0x080D},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x080E},
    {0x9F, 0x57, 0xAF, 0x8F, 0x9F, 0x9F, 0xDF, 0x080F},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0810},
    {0x6F, 0x47, 0x77, 0x67, 0x6F, 0x6F, 0x97, 0x0811},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0812},
    {0x6F, 0x47, 0x77, 0x67, 0x6F, 0x6F, 0x8F, 0x0813},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0814},
    {0x57, 0x37, 0x5F, 0x57, 0x57, 0x57, 0x7F, 0x0815},
    {0x01, 0x00, 0x01, 0x01, 0x01, 0x01, 0x02, 0x0816},
    {0x87, 0xCF, 0xAF, 0x5F, 0x87, 0x87, 0x27, 0x0817},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0818},
    {0x4F, 0x2F, 0x57, 0x47, 0x4F, 0x4F, 0x6F, 0x0819},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE04C},
    {0x9F, 0x57, 0xAF, 0x8F, 0x9F, 0x9F, 0xDF, 0xE04D},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE04E},
    {0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0x1F, 0xE04F},
    {0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x3E20},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E37},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F50},
    {0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F56},
    {0xE5, 0x60, 0xB5, 0x8F, 0x59, 0x84, 0x57, 0x3F57},

    {0x0D, 0x08, 0x08, 0x0D, 0x04, 0x0B, 0x04, 0x3F3A}, //same frram line length (Addr 0x340 0x341)
    {0xAC, 0xe3, 0xA7, 0x20, 0x6A, 0xEC, 0x83, 0x3F3B},
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0830}, /* auto-deskew off */
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0832},
    {0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0100},
    //{0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x0106},

};

#endif /* __IMX577_SLAVE_PRIV_H_ */
